#! /home/jaggu/anaconda/bin/python2.7

"""
This script essentially analyses the shelve dictionary (generated by
pbKinetics.py) to provide graphs and csv for further analysis
"""

import shelve
import os
import sys
from operator import itemgetter
import time
import fnmatch

class Frames(object):
    """
    This provides all the analysis for information per frame (i.e. aggregated
    information of the peaks etc)
    """
    def __init__(self,framesFname):
        self.framesFname = framesFname
        self.frame_peakInfo_dict = shelve.open(framesFname)

    def photobleaching(self,nbrFrames=600):
        """ Retrieves the number of active peaks etc through the given number of
        frames. Generates a tuple of (fname,frameNbr,NbrActivePeaks,...) """
            # frameInfo = [frameNbr, number of Active Peaks, number of Inactive Peaks,
            # (Active : mean Peak Intensity, mean Background Intensity, mean snr),
            # (Inactive : ....)
        pblist = list()
        for path, val in self.frame_peakInfo_dict.items()[0:nbrFrames]:
            fname = os.path.basename(path)
            frameNbr, nbrActivePeaks,nbrInactivePeaks,activeInfo,inactiveInfo = val
            pblist.append([fname,frameNbr,nbrActivePeaks,activeInfo[0],activeInfo[1],activeInfo[2],nbrInactivePeaks, inactiveInfo[0],inactiveInfo[1],inactiveInfo[2]])
        
        return sorted(pblist,key=itemgetter(1))

    def writeFile(self,listTups,fname):
        """ Writes a csv file with the list of tuples. Names the file in the
        global destDir """
        ofname = os.path.join(destDir,fname)
        ofile = open(ofname,'w')
        for tup in listTups:
            line = "\t".join(str(item) for item in tup)
            ofile.write(line + "\n")
        ofile.close()
        return ofname






################## END OF CLASS #########################################                                      

def locate(pattern, root=os.curdir):
    '''Locate all files matching supplied filename pattern in and
    below supplied root directory.'''
    allFiles = []
    for path, dirs, files in os.walk(os.path.abspath(root)):
        for filename in fnmatch.filter(files, pattern):
            allFiles.append(os.path.join(path,filename))
    return allFiles

def writeSummaryPbleaching(zipPbList,writeCols_list=[2,4]):
    """Writes a summary csv file for each of the writeCols_list"""
    writeCols = {'2':'Number of Active Peaks',
                   '3':'Number of Inactive Peaks',
                   '4':'Mean Active Peak Intensity',
                   '5':'Mean Background Intensity (Active peaks)',
                   '6':'Mean SNR (Active Peaks)'
                  }
    for col in writeCols_list:
        outfile = dateStamp + '_' + writeCols[str(col)] + '.RESULTS.sorted.csv'
        outCSV = os.path.join(destDir,outfile)
        ofile = open(outCSV,'w')
        # All the subsequent effort is to sort it and apply the further items in
        # the list appropriately.
        names = [item[0] for item in zipPbList[0]]
        nbrs = range(len(zipPbList[0]))
        namesTup = sorted(zip(names,nbrs),key=itemgetter(0))
        sortedNames = [i[0] for i in namesTup]
        sortingOrder = dict()
        for i,tup in enumerate(namesTup): sortingOrder[i] = tup[1]
        
        header = ["Frame Number"]
        header.extend(sortedNames)
        ofile.write("\t".join(header)+"\n")
        
        for items in zipPbList:
            rowItem = [None] * len(items)
            rowVals = list()
            for i in range(len(items)):
                rowVals = [str(items[i][1])]
                rowItem[i] = str(items[sortingOrder[i]][col])
            rowVals.extend(rowItem)
            ofile.write("\t".join(rowVals)+"\n")
        ofile.close()        


def analyseTraceFrames(sourceDir):
    """ This analyses and generates frame information like photobleaching csvs
    etc """
    pattern = "frame_peakInfo_dict.shelve.dir" #.dir is the shelve file generated
    allShelves = locate(pattern,sourceDir)
    allPbList = list()
    for i, shelveFile in enumerate(allShelves):
        frame = Frames(shelveFile[:-4])
        fname = shelveFile.split('/')[-3]
        print "Processing : %s ...."%(fname)
        pblist = frame.photobleaching()
        outCSV = fname + '_RESULTS.pbleaching'+str(i)+'.csv'
        frame.writeFile(pblist,outCSV)
        allPbList.append(pblist)

    zipPbList = zip(*allPbList) #Transposes!! 
    writeSummaryPbleaching(zipPbList)



def test_frames():
    shelveFname = (
    '/project2/marcotte/boulgakov/microscope/2014-July/2014-07-27/AS2_Atto647NSE_2aM_16hWash_647_OSS2_50Perc_trace002_flds001/shelve_test/frame_peakInfo_dict.shelve'
                    )
    shelveFname = (
    '/project2/marcotte/boulgakov/microscope/2014-July/2014-07-27/AS2_Atto647NSE_2aM_16hWash_647_OSS_50Perc_trace002_flds002/shelve/frame_peakInfo_dict.shelve.dir'
                    )

    test = Frames(shelveFname[:-4])
    fname = shelveFname.split('/')[-3]
    print test.framesFname
    print len(test.frame_peakInfo_dict)
    pblist = test.photobleaching()
    outCSV = fname + '_RESULTS.pbleaching.csv'
    print test.writeFile(pblist,outCSV)


if __name__ == '__main__':

    [ARG, dateStamp] = sys.argv[1:]
    sourceDir = os.path.join("/project2/marcotte/boulgakov/microscope/2014-July/",dateStamp)
    t0 = time.clock()
    if ARG == 'FRAMES':
        destDir = os.path.join("/project2/marcotte/jaggu/dataAnalysis/microscope1/2014-July/",dateStamp,"traceResults_frames")
        if not os.path.exists(destDir): os.makedirs(destDir)
        analyseTraceFrames(sourceDir)
    elif ARG == 'TEST':
        test_frames()
    else: SystemExit("Invalid Argument") 
    t1 = time.clock()
    print ("Script - %s \t Completed in %s secs \t %s"%(sys.argv, t1-t0, time.strftime("%d %b %Y %H:%M:%S",time.localtime()))
          )

"""
############### TEST CASES #####################
def test_frames():
    shelveFname = (
    '/project2/marcotte/boulgakov/microscope/2014-July/2014-07-27/AS2_Atto647NSE_2aM_16hWash_647_OSS2_50Perc_trace002_flds001/shelve_test/frame_peakInfo_dict.shelve'
                    )
    shelveFname = (
    '/project2/marcotte/boulgakov/microscope/2014-July/2014-07-27/AS2_Atto647NSE_2aM_16hWash_647_OSS_50Perc_trace002_flds002/shelve/frame_peakInfo_dict.shelve.dir'
                    )

    test = Frames(shelveFname[:-4])
    fname = shelveFname.split('/')[-3]
    print test.framesFname
    print len(test.frame_peakInfo_dict)
    pblist = test.photobleaching()
    outCSV = fname + '_RESULTS.pbleaching.csv'
    print test.writeFile(pblist,outCSV)
##################################################
"""






